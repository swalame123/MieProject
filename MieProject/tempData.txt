

//[HttpPost("GoogleLogin")]
        //public IActionResult GoogleLogin([FromBody] GoogleUser googleUserData)
        //{
        //    try
        //    {
        //        if (IsValidGoogleUser(googleUserData))
        //        {
        //            // Additional logic if needed

        //            // Generate JWT token
        //            var token = CreateJwt(googleUserData.Email);

        //            return Ok(new { Token = token, Message = "Login Success!" });
        //        }

        //        return BadRequest("Invalid Google user.");
        //    }
        //    catch (Exception ex)
        //    {
        //        return BadRequest(ex.Message);
        //    }
        //}

        //private bool IsValidGoogleUser(GoogleUser googleUserData)
        //{
        //    try
        //    {
        //        // Validate the Google user using Google.Apis.Auth
        //        var googleJsonWebSignature = GoogleJsonWebSignature.ValidateAsync(clientId, googleUserData.IdToken).Result;

        //        // Check if the email in the Google user matches your expected logic
        //        if (googleJsonWebSignature.Email != googleUserData.Email)
        //        {
        //            return false;
        //        }

        //        // Additional validation logic if needed

        //        return true;
        //    }
        //    catch (Exception)
        //    {
        //        return false;
        //    }
        //}
        [HttpPost("GoogleSignin")]
        //public async Task<IActionResult> GoogleLogin([FromBody]string email,string password)
        //{
        //    SmartsheetClient smartsheet = new SmartsheetBuilder().SetAccessToken(accessToken).Build();
        //    string sheetId = configuration.GetSection("SmartsheetSettings:SheetId1").Value;

        //    long.TryParse(sheetId, out long parsedSheetId);
        //    Sheet sheet = smartsheet.SheetResources.GetSheet(parsedSheetId, null, null, null, null, null, null, null);

        //    var EmailColumnId = GetColumnIdByName(sheet, "Email");
        //    var passwordColumnId = GetColumnIdByName(sheet, "Password");
        //    var roleColumnId = GetColumnIdByName(sheet, "Role");
        //    var rows = sheet.Rows;
        //    foreach(var row in rows)
        //    {
        //        var emailCell = row.Cells.FirstOrDefault(c => c.ColumnId == EmailColumnId);
        //        var passwordCell = row.Cells.FirstOrDefault(c => c.ColumnId == passwordColumnId);
        //        var roleCell = row.Cells.FirstOrDefault(c => c.ColumnId == roleColumnId);
        //        if (emailCell?.Value?.ToString() == email && passwordCell?.Value?.ToString() == password )
        //        {
        //            var username = emailCell.Value?.ToString();
        //            var Password = passwordCell.Value?.ToString();
        //            var role = roleCell.Value?.ToString();
        //            var token = CreateJwt(username);

        //            return Ok(new
        //            { Token = token, Message = "Login Success!" });


        //        }
        //    }

           
        //    //var settings = new GoogleJsonWebSignature.ValidationSettings
        //    //{
        //    //    Audience = new List<string> { clientId }
        //    //};

        //    //var payload = await GoogleJsonWebSignature.ValidateAsync(password, settings);

        //    //var user = GetUserFromSmartsheetByEmail(smartsheet, parsedSheetId, "Email", payload.Email);

        //    //if (user != null)
        //    //{

        //    //    return Ok(new { Token = "your_generated_token", Message = "Google Sign-In Success!" });
        //    //}
        //    //else
        //    //{
        //    //    return BadRequest("Invalid Google credentials.");
        //    //}

           
            
        //}
        ////private string GetUserFromSmartsheetByEmail(SmartsheetClient smartsheet,long sheetId,string emailColumnName ,string email)
        ////{
        //    try
        //    {
        //        // Fetch all rows from Smartsheet
        //        var sheet = smartsheet.SheetResources.GetSheet(sheetId, null, null, null, null, null, null, null);
        //        // var sheetRows = smartsheet.SheetResources.RowResources.GetRows(sheetId, null, null, null, null, null, null, null);
        //        List<string> sheetRows = new List<string> { };
        //        foreach (var row in sheet.Rows)
        //        {

        //            sheetRows.Add(row.ToString());
        //        }
        //        // columnNames = new List<string>();
        //        //foreach (Column column in sheet.Columns)
        //        //{
        //        //    columnNames.Add(column.Title);
        //        //}
        //        var emailColumnId = GetColumnIdByName(sheet, emailColumnName);

        //        // Find the row where the email matches
        //        var userRow = sheetRows.FirstOrDefault(row =>
        //            row.Cells.Any(cell => cell.ColumnId == emailColumnId && cell.Value.ToString() == email));

        //        if (userRow != null)
        //        {
        //            // Map Smartsheet row data to your User class
        //            var user = new User
        //            {
        //                // Assuming you have a method to get cell value by column name
        //                Email = GetCellValueByColumnName(userRow, sheet, emailColumnName),
        //                // Add other properties as needed
        //            };

        //            return user;
        //        }

        //        return null; // User not found in Smartsheet
        //    }
        //    catch (Exception ex)
        //    {
        //        // Handle exceptions accordingly
        //        Console.WriteLine($"Error retrieving user from Smartsheet: {ex.Message}");
        //        return null;
        //    }
        //}


        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
          [HttpPost("RegisterNew")]
        public async Task<IActionResult> RegisterNew([FromBody] Register formData)
        {
            try
            {
                SmartsheetClient smartsheet = new SmartsheetBuilder().SetAccessToken(accessToken).Build();
                // Retrieve sheet ID from configuration
                string sheetId = configuration.GetSection("SmartsheetSettings:SheetId1").Value;

                // Convert sheet ID to long if needed
                long.TryParse(sheetId, out long parsedSheetId);
                Sheet sheet = smartsheet.SheetResources.GetSheet(parsedSheetId, null, null, null, null, null, null, null);

                var newRow = new Row();
                newRow.Cells = new List<Cell>();
                newRow.Cells.Add(new Cell
                {
                    ColumnId = GetColumnIdByName(sheet, "FirstName"),
                    Value = formData.FirstName
                });
                newRow.Cells.Add(new Cell
                {
                    ColumnId = GetColumnIdByName(sheet, "LastName"),
                    Value = formData.LastName
                });
                newRow.Cells.Add(new Cell
                {
                    ColumnId = GetColumnIdByName(sheet, "UserName"),
                    Value = formData.UserName
                });
                newRow.Cells.Add(new Cell
                {
                    ColumnId = GetColumnIdByName(sheet, "Password"),
                    Value = formData.Password
                });
                newRow.Cells.Add(new Cell
                {
                    ColumnId = GetColumnIdByName(sheet, "Email"),
                    Value = formData.Email
                });
                newRow.Cells.Add(new Cell
                {
                    ColumnId = GetColumnIdByName(sheet, "MobileNumber"),
                    Value = formData.MobileNumber
                });
                newRow.Cells.Add(new Cell
                {
                    ColumnId = GetColumnIdByName(sheet, "Role"),
                    Value = formData.Role
                });

                // Validate Email
                var emailColumnId = GetColumnIdByName(sheet, "Email");
                var existingEmails = sheet.Rows.Select(row => row.Cells.FirstOrDefault(c => c.ColumnId == emailColumnId)?.Value?.ToString());

                if (existingEmails.Contains(formData.Email))
                {
                    return BadRequest("Email already exists.");
                }

                // Validate Username
                var usernameColumnId = GetColumnIdByName(sheet, "UserName");
                var existingUsernames = sheet.Rows.Select(row => row.Cells.FirstOrDefault(c => c.ColumnId == usernameColumnId)?.Value?.ToString());

                if (existingUsernames.Contains(formData.UserName))
                {
                    return BadRequest("Username already exists.");
                }

                // Validate Password
                if (formData.Password.Length < 8 || !HasAlphaNumeric(formData.Password))
                {
                    return BadRequest("Password should be at least 8 characters long and include alphanumeric characters.");
                }

                smartsheet.SheetResources.RowResources.AddRows(parsedSheetId, new Row[] { newRow });





                return Ok("Data added successfully.");


            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }
      
        private bool HasAlphaNumeric(string input)
        {
            return input.Any(char.IsLetter) && input.Any(char.IsDigit);
        }
        /////////////////////////////////////////////////////////


         [HttpPost("Login")]
        public IActionResult Login([FromBody] Register userData)
        {
            try
            {
                SmartsheetClient smartsheet = new SmartsheetBuilder().SetAccessToken(accessToken).Build();
                string sheetId = configuration.GetSection("SmartsheetSettings:SheetId1").Value;

                long.TryParse(sheetId, out long parsedSheetId);
                Sheet sheet = smartsheet.SheetResources.GetSheet(parsedSheetId, null, null, null, null, null, null, null);

                var usernameColumnId = GetColumnIdByName(sheet, "UserName");
                var passwordColumnId = GetColumnIdByName(sheet, "Password");
                var roleColumnId = GetColumnIdByName(sheet, "Role");


                if (usernameColumnId == 0 || passwordColumnId == 0)
                {
                    return BadRequest("Column not found");
                }

                var rows = sheet.Rows;

                foreach (var row in rows)
                {
                    var usernameCell = row.Cells.FirstOrDefault(c => c.ColumnId == usernameColumnId);
                    var passwordCell = row.Cells.FirstOrDefault(c => c.ColumnId == passwordColumnId);
                    var roleCell = row.Cells.FirstOrDefault(c => c.ColumnId == roleColumnId);

                    if (usernameCell?.Value?.ToString() == userData.UserName && passwordCell?.Value?.ToString() == userData.Password)
                    {
                        var username=usernameCell.Value?.ToString();
                        var password=passwordCell.Value?.ToString();
                        var role= roleCell.Value?.ToString();
                        // Additional logic if needed
                        var token = CreateJwt(username);

                        return Ok(new 
                        {Token=token, Message = "Login Success!" });
                    }
                }

                // If no matching credentials found
                return BadRequest("Username or Password Incorrect");
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }


        .............................................................
            //[HttpGet("GetSheetIds")]
        //public IActionResult Get()
        //{
        //    try
        //    {
        //        SmartsheetClient smartsheet = new SmartsheetBuilder().SetAccessToken(accessToken).Build();
        //        PaginatedResult<Sheet> sheets = smartsheet.SheetResources.ListSheets(null, new PaginationParameters(true, null, null), null);
        //        List<long> sheetIds = new List<long>();
        //        foreach (Sheet sheet in sheets.Data)
        //        {
        //            sheetIds.Add((long)sheet.Id);
        //        }
        //        return Ok(sheetIds);
        //    }
        //    catch (Exception ex)
        //    {
        //        return BadRequest(ex.Message);
        //    }
        //}
        //[HttpGet("GetSheetData")]
        //public IActionResult GetData()
        //{
        //    try
        //    {
        //        SmartsheetClient smartsheet = new SmartsheetBuilder().SetAccessToken(accessToken).Build();
        //        long sheetId = 8716767337598852;
        //        Sheet sheet = smartsheet.SheetResources.GetSheet(sheetId, null, null, null, null, null, null, null);
        //        List<List<object>> sheetData = new List<List<object>>();

        //        foreach (Row row in sheet.Rows)
        //        {
        //            List<object> rowData = new List<object>();
        //            foreach (Cell cell in row.Cells)
        //            {
        //                rowData.Add(cell.Value);
        //            }
        //            sheetData.Add(rowData);
        //        }
        //        return Ok(sheetData);
        //    }
        //    catch (Exception ex)
        //    {
        //        return BadRequest(ex.Message);
        //    }
        //}
        //[HttpGet("GetSheetDataAppSettings")]
        //public IActionResult GetDataex()
        //{
        //    try
        //    {
        //        SmartsheetClient smartsheet = new SmartsheetBuilder().SetAccessToken(accessToken).Build();
        //        string sheetId1 = configuration.GetSection("SmartsheetSettings:sheetId1").Value;
        //        long.TryParse(sheetId1, out long parsedSheetId);

        //        Sheet sheet = smartsheet.SheetResources.GetSheet(parsedSheetId, null, null, null, null, null, null, null);
        //        List<List<object>> sheetData = new List<List<object>>();

        //        foreach (Row row in sheet.Rows)
        //        {
        //            List<object> rowData = new List<object>();
        //            foreach (Cell cell in row.Cells)
        //            {
        //                rowData.Add(cell.Value);
        //            }
        //            sheetData.Add(rowData);
        //        }
        //        return Ok(sheetData);
        //    }
        //    catch (Exception ex)
        //    {
        //        return BadRequest(ex.Message);
        //    }
        //}


        ////////////////////////////////////////////////////////////////////////////////////////
         [HttpPost("AddData")]
        public IActionResult AddData([FromBody] UserRoleMaster formData)
        {
            try
            {
                SmartsheetClient smartsheet = new SmartsheetBuilder().SetAccessToken(accessToken).Build();
                string EmpMsater1 = configuration.GetSection("SmartsheetSettings:SheetId1").Value;
                string EmpMaster2 = configuration.GetSection("SmartsheetSettings:SheetId2").Value;
                string RpleMaster = configuration.GetSection("SmartsheetSettings:RoleMaster").Value;
                string UserRoleMaster = configuration.GetSection("SmartsheetSettings:UserRoleMaster").Value;
                //long.TryParse(UserRoleMaster, out long parsedSheetId);
                //Sheet sheet = smartsheet.SheetResources.GetSheet(parsedSheetId, null, null, null, null, null, null, null);
                //List<string> UserRoleMasterColumnName = new List<string>();
                //foreach (Column column in sheet.Columns)
                //{
                //    UserRoleMasterColumnName.Add(column.Title);
                //}
            }
            catch (Exception ex)
            {

            }
            return Ok(formData);
        }
        /////////////////////////////////////////////////////////////////////////////////////////////////
        [5:17 PM] Srikanth Nagolla
[HttpPost("CreateUserRole")]
public IActionResult CreateUserRole([FromBody] UserRoleInputModel userData)
{
    try
    {
        // Assuming you have the necessary configurations and access token
        SmartsheetClient smartsheet = new SmartsheetBuilder().SetAccessToken(accessToken).Build();
 
        // Fetch sheet IDs from configuration
        string sheet1Id = configuration.GetSection("SmartsheetSettings:Sheet1Id").Value;
        string sheet2Id = configuration.GetSection("SmartsheetSettings:Sheet2Id").Value;
        string userRoleMasterSheetId = configuration.GetSection("SmartsheetSettings:UserRoleMasterSheetId").Value;
 
        // Fetch user role master sheet
        long.TryParse(userRoleMasterSheetId, out long userRoleMasterSheetParsedId);
        Sheet userRoleMasterSheet = smartsheet.SheetResources.GetSheet(userRoleMasterSheetParsedId, null, null, null, null, null, null, null);
 
        // Lookup employee ID and role ID
        string employeeId = LookupEmployeeId(userData.Email, sheet1Id, sheet2Id);
        string roleId = LookupRoleId(userData.RoleName);
 
        // Post data to user role master sheet
        var newRow = new Row
        {
            Cells = new List<Cell>
            {
                new Cell
                {
                    ColumnId = GetColumnIdByName(userRoleMasterSheet, "EmployeeId"),
                    Value = employeeId
                },
                new Cell
                {
                    ColumnId = GetColumnIdByName(userRoleMasterSheet, "Username"),
                    Value = userData.Email // Assuming email as username
                },
                new Cell
                {
                    ColumnId = GetColumnIdByName(userRoleMasterSheet, "RoleId"),
                    Value = roleId
                },
                // Add more cells as needed for other columns in user role master sheet
            }
        };
 
        // Add the new row to the user role master sheet
        smartsheet.SheetResources.RowResources.AddRows(userRoleMasterSheetParsedId, new Row[] { newRow });
 
        return Ok("User Role created successfully");
    }
    catch (Exception ex)
    {
        return BadRequest(ex.Message);
    }
}
 
private string LookupEmployeeId(string email, string sheet1Id, string sheet2Id)
{
    // Implement logic to lookup employee ID based on email from sheet1 and sheet2
    // You can reuse your existing logic or modify it as needed
    // Return the employee ID
}
 
private string LookupRoleId(string roleName)
{
    // Implement logic to lookup role ID based on roleName
    // You can use a similar approach as in the Login method
    // Return the role ID
}
 
private long GetColumnIdByName(Sheet sheet, string columnName)
{
    // Implement logic to get column ID by name from the specified sheet
    // You can reuse your existing GetColumnIdByName method or modify it as needed
    // Return the column ID
}
=========================================================================
private string LookupEmployeeId(string email, string sheet1Id, string sheet2Id)
{
    SmartsheetClient smartsheet = new SmartsheetBuilder().SetAccessToken(accessToken).Build();
 
    // Lookup in Sheet1
    string employeeId = LookupInSheet(email, "Email", "EmployeeId", sheet1Id, smartsheet);
    
    if (string.IsNullOrEmpty(employeeId))
    {
        // If not found in Sheet1, try Sheet2
        employeeId = LookupInSheet(email, "Email", "EmployeeId", sheet2Id, smartsheet);
    }
 
    return employeeId;
}
 
private string LookupRoleId(string roleName)
{
    SmartsheetClient smartsheet = new SmartsheetBuilder().SetAccessToken(accessToken).Build();
 
    // Assuming "Role" is the column in your Role sheet corresponding to role names
    string roleId = LookupInSheet(roleName, "Role", "RoleId", "RoleSheetId", smartsheet);
 
    return roleId;
}
 
private string LookupInSheet(string searchValue, string searchColumn, string resultColumn, string sheetId, SmartsheetClient smartsheet)
{
    long.TryParse(sheetId, out long parsedSheetId);
    Sheet sheet = smartsheet.SheetResources.GetSheet(parsedSheetId, null, null, null, null, null, null, null);
 
    // Find the column IDs based on the provided column names
    long searchColumnId = GetColumnIdByName(sheet, searchColumn);
    long resultColumnId = GetColumnIdByName(sheet, resultColumn);
 
    // Search for the row with the matching value in the search column
    var matchingRow = sheet.Rows.FirstOrDefault(row =>
        row.Cells.Any(cell => cell.ColumnId == searchColumnId && cell.Value?.ToString() == searchValue));
 
    // If a matching row is found, return the value from the result column
    if (matchingRow != null)
    {
        var resultCell = matchingRow.Cells.FirstOrDefault(cell => cell.ColumnId == resultColumnId);
        return resultCell?.Value?.ToString();
    }
 
    // If no matching row is found, return null or an empty string based on your preference
    return null;
}
   